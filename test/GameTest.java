import othellogame.model.*;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.*;

/**
 * JUnit test class for the {@link OthelloGame} logic, including player moves, game state, and win conditions.
 * <p>
 * This class contains test cases for scenarios such as a full board game and a not-full board game.
 * @author Dinh Thuy Nhat Vy
 * @version 1.0, 12/07/2023
 * @see Player
 * @see OthelloGame
 * @see Board
 * @see Mark
 * @see Move
 * @see OthelloMove
 */
class GameTest {
    /**
     * The first player in the Othello game, initialized with the mark BLACK.
     */
    private Player player1;

    /**
     * The second player in the Othello game, initialized with the mark WHITE.
     */
    private Player player2;

    /**
     * The instance of the Othello game being tested.
     */
    private OthelloGame game;

    /**
     * The game board associated with the Othello game being tested.
     */
    private Board board;

    /**
     * Default constructor for the {@code GameTest} class.
     * <p>
     * Note: this constructor is automatically generated by the compiler and is not intended for direct use.
     */
    @SuppressWarnings("unused")
    GameTest() {}

    /**
     * Sets up the initial state for each test case. Initializes players, the game instance, and the game board.
     */
    @BeforeEach
    public void setUp() {
        this.player1 = new HumanPlayer("1st player", Mark.BLACK);
        this.player2 = new HumanPlayer("2nd player", Mark.WHITE);
        this.game = new OthelloGame(player1, player2);
        this.board = game.getBoard();
    }

    /**
     * Tests the scenarios for a full board game, including player turns, move validity, and win conditions.
     */
    @Test
    void testFullBoardGame() {
        //Checks getTurn() method
        assertEquals(player1, game.getTurn());

        //Checks isValidMove(Move move) method
        assertFalse(game.isValidMove(new OthelloMove(Mark.BLACK, 64))); //Invalid move since the field in invalid
        assertFalse(game.isValidMove(new OthelloMove(Mark.BLACK, 27))); //Invalid move since the field is not empty
        assertFalse(game.isValidMove(new OthelloMove(Mark.BLACK, 25))); //Invalid move since the right field is empty (different from the opponent mark)
        assertFalse(game.isValidMove(new OthelloMove(Mark.BLACK, 20))); /*Invalid move since the bottom-left field contains opponent mark but the next
                                                                              bottom-left field is empty (different from the current mark)*/
        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 26))); //Valid move

        //Checks getValidMoves() method
        for (Move validMove : game.getValidMoves()) {
            Mark currentMark = ((OthelloMove) validMove).getMark();
            int index = ((OthelloMove) validMove).getIndex();
            assertTrue(game.getValidMoves().size() == 4
                        && currentMark == Mark.BLACK
                        && (index == 19 || index == 26 || index == 37 || index == 44));
        }

        //Checks getOpponentValidMoves() method
        for (Move opponentValidMove : game.getOpponentValidMoves()) {
            Mark opponentMark = ((OthelloMove) opponentValidMove).getMark();
            int index = ((OthelloMove) opponentValidMove).getIndex();
            assertTrue(game.getValidMoves().size() == 4
                    && opponentMark == Mark.WHITE
                    && (index == 20 || index == 29 || index == 34 || index == 43));
        }

        //Checks doMove(Move move) and flip(int index) methods
        game.doMove(new OthelloMove(Mark.BLACK, 26));
        assertEquals(Mark.BLACK, board.getField(26));
        assertEquals(Mark.BLACK, board.getField(27)); //Checks right flip
        assertEquals(Mark.WHITE, board.getField(36)); //Unaffected field remains unchanged

        //Checks swapTurn() method
        assertEquals(player2, game.getTurn());
        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 34)));
        game.doMove(new OthelloMove(Mark.WHITE, 34));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 45)));
        game.doMove(new OthelloMove(Mark.BLACK, 45));
        assertEquals(Mark.BLACK, board.getField(36)); //Checks left-top flip

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 21)));
        game.doMove(new OthelloMove(Mark.WHITE, 21));
        assertEquals(Mark.WHITE, board.getField(28)); //Checks left-bottom flip

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 41)));
        game.doMove(new OthelloMove(Mark.BLACK, 41));
        assertEquals(Mark.BLACK, board.getField(34)); //Checks right-top flip

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 37)));
        game.doMove(new OthelloMove(Mark.WHITE, 37));
        assertEquals(Mark.WHITE, board.getField(36)); //Checks left flip

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 43)));
        game.doMove(new OthelloMove(Mark.BLACK, 43));
        assertEquals(Mark.BLACK, board.getField(35)); //Checks top flip

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 18)));
        game.doMove(new OthelloMove(Mark.WHITE, 18));
        assertEquals(Mark.WHITE, board.getField(27)); //Checks right-bottom flip

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 29)));
        game.doMove(new OthelloMove(Mark.BLACK, 29));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 54)));
        game.doMove(new OthelloMove(Mark.WHITE, 54));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 10)));
        game.doMove(new OthelloMove(Mark.BLACK, 10)); //Checks bottom flip

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 42)));
        game.doMove(new OthelloMove(Mark.WHITE, 42));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 63)));
        game.doMove(new OthelloMove(Mark.BLACK, 63));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 25)));
        game.doMove(new OthelloMove(Mark.WHITE, 25));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 13)));
        game.doMove(new OthelloMove(Mark.BLACK, 13));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 48)));
        game.doMove(new OthelloMove(Mark.WHITE, 48));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 49)));
        game.doMove(new OthelloMove(Mark.BLACK, 49));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 11)));
        game.doMove(new OthelloMove(Mark.WHITE, 11));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 17)));
        game.doMove(new OthelloMove(Mark.BLACK, 17));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 50)));
        game.doMove(new OthelloMove(Mark.WHITE, 50));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 12)));
        game.doMove(new OthelloMove(Mark.BLACK, 12));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 38)));
        game.doMove(new OthelloMove(Mark.WHITE, 38));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 47)));
        game.doMove(new OthelloMove(Mark.BLACK, 47));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 22)));
        game.doMove(new OthelloMove(Mark.WHITE, 22));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 19)));
        game.doMove(new OthelloMove(Mark.BLACK, 19));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 39)));
        game.doMove(new OthelloMove(Mark.WHITE, 39));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 31)));
        game.doMove(new OthelloMove(Mark.BLACK, 31));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 14)));
        game.doMove(new OthelloMove(Mark.WHITE, 14));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 46)));
        game.doMove(new OthelloMove(Mark.BLACK, 46));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 3)));
        game.doMove(new OthelloMove(Mark.WHITE, 3));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 24)));
        game.doMove(new OthelloMove(Mark.BLACK, 24));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 1)));
        game.doMove(new OthelloMove(Mark.WHITE, 1));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 44)));
        game.doMove(new OthelloMove(Mark.BLACK, 44));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 32)));
        game.doMove(new OthelloMove(Mark.WHITE, 32));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 20)));
        game.doMove(new OthelloMove(Mark.BLACK, 20));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 30)));
        game.doMove(new OthelloMove(Mark.WHITE, 30));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 9)));
        game.doMove(new OthelloMove(Mark.BLACK, 9));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 51)));
        game.doMove(new OthelloMove(Mark.WHITE, 51));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 52)));
        game.doMove(new OthelloMove(Mark.BLACK, 52));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 16)));
        game.doMove(new OthelloMove(Mark.WHITE, 16));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 15)));
        game.doMove(new OthelloMove(Mark.BLACK, 15));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 53)));
        game.doMove(new OthelloMove(Mark.WHITE, 53));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 40)));
        game.doMove(new OthelloMove(Mark.BLACK, 40));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 5)));
        game.doMove(new OthelloMove(Mark.WHITE, 5));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 60)));
        game.doMove(new OthelloMove(Mark.BLACK, 60));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 59)));
        game.doMove(new OthelloMove(Mark.WHITE, 59));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 56)));
        game.doMove(new OthelloMove(Mark.BLACK, 56));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 0)));
        game.doMove(new OthelloMove(Mark.WHITE, 0));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 6)));
        game.doMove(new OthelloMove(Mark.BLACK, 6));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 33)));
        game.doMove(new OthelloMove(Mark.WHITE, 33));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 23)));
        game.doMove(new OthelloMove(Mark.BLACK, 23));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 4)));
        game.doMove(new OthelloMove(Mark.WHITE, 4));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 57)));
        game.doMove(new OthelloMove(Mark.BLACK, 57));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 58)));
        game.doMove(new OthelloMove(Mark.WHITE, 58));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 8)));
        game.doMove(new OthelloMove(Mark.BLACK, 8));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 61)));
        game.doMove(new OthelloMove(Mark.WHITE, 61));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 62)));
        game.doMove(new OthelloMove(Mark.BLACK, 62));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 2)));
        game.doMove(new OthelloMove(Mark.WHITE, 2));

        //Checks isGameOver() method in case the current player with mark BLACK cannot move
        assertTrue(game.getValidMoves().isEmpty());
        assertFalse(game.getOpponentValidMoves().isEmpty());
        game.swapTurn();
        assertFalse(game.isGameOver());

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 55)));
        game.doMove(new OthelloMove(Mark.WHITE, 55));

        assertTrue(game.getValidMoves().isEmpty());
        assertFalse(game.isGameOver());
        game.swapTurn();

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 7)));
        game.doMove(new OthelloMove(Mark.WHITE, 7));

        assertTrue(game.isGameOver());
        assertEquals(28, game.countBlack());
        assertEquals(36, game.countWhite());
        assertEquals(Mark.WHITE, game.getWinner());
    }

    /**
     * Tests scenarios for a not-full board game, including player turns, move validity, and win conditions.
     */
    @Test
    void testNotFullBoardGame() {
        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 19)));
        game.doMove(new OthelloMove(Mark.BLACK, 19));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 18)));
        game.doMove(new OthelloMove(Mark.WHITE, 18));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 37)));
        game.doMove(new OthelloMove(Mark.BLACK, 37));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 29)));
        game.doMove(new OthelloMove(Mark.WHITE, 29));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 21)));
        game.doMove(new OthelloMove(Mark.BLACK, 21));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 11)));
        game.doMove(new OthelloMove(Mark.WHITE, 11));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 3)));
        game.doMove(new OthelloMove(Mark.BLACK, 3));

        assertTrue(game.isValidMove(new OthelloMove(Mark.WHITE, 20)));
        game.doMove(new OthelloMove(Mark.WHITE, 20));

        assertTrue(game.isValidMove(new OthelloMove(Mark.BLACK, 17)));
        game.doMove(new OthelloMove(Mark.BLACK, 17));

        assertTrue(game.isGameOver());
        assertEquals(13, game.countBlack());
        assertEquals(0, game.countWhite());
        assertEquals(Mark.BLACK, game.getWinner());
    }
}