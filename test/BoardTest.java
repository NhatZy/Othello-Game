import othellogame.model.*;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.*;

/**
 * JUnit test class for the {@link Board} class.
 * @author Dinh Thuy Nhat Vy
 * @version 1.0, 12/07/2023
 * @see Board
 */
class BoardTest {
    /**
     * The {@code Board} instance used for testing.
     */
    private Board board;

    /**
     * Default constructor for the {@code BoardTest} class.
     * <p>
     * Note: this constructor is automatically generated by the compiler and is not intended for direct use.
     */
    @SuppressWarnings("unused")
    BoardTest() {}

    /**
     * Sets up a new board before each test.
     */
    @BeforeEach
    public void setUp() {
        this.board = new Board();
    }

    /**
     * Tests the initial setup of the board.
     */
    @Test
    void testSetUp() {
        for (int i = 0; i < Board.DIM; i++) {
            for (int j = 0; j < Board.DIM; j++) {
                Mark currentMark = board.getField(board.index(i, j));
                if ((i == 3 && j == 3) || (i == 4 && j == 4)) {
                    assertEquals(Mark.WHITE, currentMark);
                } else if ((i == 3 && j == 4) || (i == 4 && j == 3)) {
                    assertEquals(Mark.BLACK, currentMark);
                } else {
                    assertEquals(Mark.EMPTY, currentMark);
                }
            }
        }
    }

    /**
     * Tests the deep copy functionality of the board.
     */
    @Test
    void testDeepCopy() {
        board.setField(0, Mark.BLACK);
        board.setField(63, Mark.WHITE);
        Board deepCopiedBoard = board.deepCopy();
        for (int i = 0; i < Board.TOTALDIM; i++) {
            assertEquals(board.getField(i), deepCopiedBoard.getField(i));
        }
        deepCopiedBoard.setField(0, Mark.WHITE);
        assertEquals(Mark.WHITE, deepCopiedBoard.getField(0));
        assertEquals(Mark.BLACK, board.getField(0));
    }

    /**
     * Tests the index calculation for a given row and column.
     */
    @Test
    void testIndex() {
        int index = 0;
        for (int i = 0; i < Board.DIM; i++) {
            for (int j = 0; j < Board.DIM; j++) {
                assertEquals(index, board.index(i, j));
                index += 1;
            }
        }
    }

    /**
     * Tests the validity of a field index.
     */
    @Test
    void testIsField() {
        assertFalse(board.isField(-1));
        assertFalse(board.isField(64));
        assertTrue(board.isField(0));
        assertTrue(board.isField(63));
        assertTrue(board.isField(32));
    }

    /**
     * Tests setting and getting the mark of a field.
     */
    @Test
    void testSetAndGetField() {
        board.setField(0, Mark.BLACK);
        assertEquals(Mark.BLACK, board.getField(0));
        assertEquals(Mark.EMPTY, board.getField(63));
    }

    /**
     * Tests checking if a field on the board is empty.
     */
    @Test
    void testIsEmptyField() {
        board.setField(0, Mark.BLACK);
        assertFalse(board.isEmptyField(0));
        assertFalse(board.isEmptyField(board.index(3, 3)));
        assertFalse(board.isEmptyField(board.index(3, 4)));
        assertFalse(board.isEmptyField(board.index(4, 3)));
        assertFalse(board.isEmptyField(board.index(4, 4)));
        assertTrue(board.isEmptyField(63));
    }

    /**
     * Tests resetting the board to its initial state.
     */
    @Test
    void testReset() {
        board.setField(0, Mark.BLACK);
        board.reset();
        assertEquals(Mark.EMPTY, board.getField(0));
        assertEquals(Mark.WHITE, board.getField(board.index(3, 3)));
        assertEquals(Mark.BLACK, board.getField(board.index(3, 4)));
        assertEquals(Mark.BLACK, board.getField(board.index(4, 3)));
        assertEquals(Mark.WHITE, board.getField(board.index(4, 4)));
    }
}