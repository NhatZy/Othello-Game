package othellogame.ui.view;

import javafx.fxml.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.image.*;
import javafx.scene.input.*;
import javafx.scene.layout.*;
import javafx.scene.text.*;
import javafx.stage.*;
import othellogame.ui.*;

import java.io.*;
import java.util.*;

/**
 * Represents the controller for the {@code OfflinePlayingScene} FXML file in the Othello game application.
 * <p>
 * It handles the user interface for setting up an offline Othello game, including player names, avatars, and game initiation.
 * <p>
 * Follows the Model-View-Controller (MVC) pattern.
 * @author Dinh Thuy Nhat Vy
 * @version 1.0, 12/07/2023
 * @see Controller
 */
public class OfflinePlayingView {
    /**
     * The resource bundle for localization and internationalization.
     */
    private ResourceBundle bundle;

    /**
     * The main pane containing the components of the {@code OfflinePlayingScene}.
     */
    @FXML
    private Pane offlinePlaying;

    /**
     * Text field for the first player's username.
     */
    @FXML
    private TextField firstPlayerUsername;

    /**
     * Text field for the second player's username.
     */
    @FXML
    private TextField secondPlayerUsername;

    /**
     * Representing the username for the first player in the offline Othello game application.
     * <p>
     * This variable is used to store the username entered by the first player during game setup.
     */
    public static String firstUsername;

    /**
     * Representing the username for the second player in the offline Othello game application.
     * <p>
     * This variable is used to store the username entered by the second player during game setup.
     */
    public static String secondUsername;

    /**
     * List of ImageView elements representing arrow buttons for changing avatars.
     */
    @FXML
    private List<ImageView> arrows;

    /**
     * List of ImageView elements representing player avatars.
     */
    @FXML
    private List<ImageView> playerAvatars;

    /**
     * Array storing the current avatar index for each player.
     */
    private int[] avatar = {0, 0};

    /**
     * Image representing an available avatar.
     */
    private Image calmGirlIcon = new Image("file:src/images/CalmGirl_Icon.png");

    /**
     * Image representing an available avatar.
     */
    private Image coolGirlIcon = new Image("file:src/images/CoolGirl_Icon.png");

    /**
     * Image representing an available avatar.
     */
    private Image calmBoyIcon = new Image("file:src/images/CalmBoy_Icon.png");

    /**
     * Image representing an available avatar.
     */
    private Image coolBoyIcon = new Image("file:src/images/CoolBoy_Icon.png");

    /**
     * Static Image variable representing the selected avatar for the first player.
     */
    public static Image firstAvatar;

    /**
     * Static Image variable representing the selected avatar for the second player.
     */
    public static Image secondAvatar;

    /**
     * Group containing the warning UI elements for username input.
     */
    @FXML
    private Group warning;

    /**
     * Text element displaying warnings related to username input.
     */
    @FXML
    private Text usernameWarning;

    /**
     * ImageView representing the sound icon in the offline playing view.
     */
    @FXML
    public ImageView soundIcon;

    /**
     * Default constructor for the {@code OfflinePlayingView} class.
     * <p>
     * Note: this constructor is automatically generated by the compiler and is not intended for direct use.
     */
    public OfflinePlayingView() {}

    /**
     * Loads the {@code OfflinePlayingScene} FXML file and initializes the necessary components.
     * @param currentPane the current pane from which the {@code OfflinePlayingScene} is loaded.
     */
    public void loadOfflinePlayingScene(Pane currentPane) {
        try {
            this.bundle = ResourceBundle.getBundle("othellogame.ui.languages", Locale.getDefault());
            FXMLLoader loader = new FXMLLoader();
            Stage stage = (Stage) currentPane.getScene().getWindow();
            loader.setLocation(getClass().getResource("OfflinePlayingScene.fxml"));
            loader.setResources(bundle);
            loader.setController(this);
            Parent root = loader.load();
            stage.getScene().setRoot(root);
        } catch (IOException e) {
            System.out.println("ERROR: [OfflinePlayingScene] - " + e.getMessage());
        }
    }

    /**
     * Handles the click event for the home icon, navigating back to the main menu.
     */
    @FXML
    private void onHomeIconClick() {
        Controller.getInstance().loadScene("menu", offlinePlaying);
    }

    /**
     * Handles the click event for the "Game Instructions" button, navigating to the {@code GameInstructionsScene}.
     */
    @FXML
    private void onInstructionsClick() {
        Controller.previousScene = "offlinePlaying";
        Controller.getInstance().loadScene("gameInstructions", offlinePlaying);
    }

    /**
     * Handles the mouse click event on the avatar change arrows, updating the displayed avatars accordingly.
     * @param e the MouseEvent triggered by the player.
     */
    @FXML
    private void changeAvatar(MouseEvent e) {
        ImageView clickedArrow = (ImageView) e.getSource();
        if (clickedArrow.equals(arrows.get(0))) {
            showAvatar(0, false);
        } else if (clickedArrow.equals(arrows.get(1))) {
            showAvatar(0, true);
        } else if (clickedArrow.equals(arrows.get(2))) {
            showAvatar(1, false);
        } else if (clickedArrow.equals(arrows.get(3))) {
            showAvatar(1, true);
        }
    }

    /**
     * Updates the displayed avatars for a player based on arrow clicks.
     * @param playerIndex the index of the player whose avatar is being changed.
     * @param isRightArrow true if the right arrow is clicked, false if the left arrow is clicked.
     */
    private void showAvatar(int playerIndex, boolean isRightArrow) {
        int currentAvatar = this.avatar[playerIndex];
        int nextAvatar;
        if (isRightArrow) {
            nextAvatar = (currentAvatar + 1) % 4;
        } else {
            nextAvatar = (currentAvatar - 1 + 4) % 4;
        }
        playerAvatars.get(playerIndex).setImage(getAvatar(nextAvatar));
        this.avatar[playerIndex] = nextAvatar;
    }

    /**
     * Retrieves the appropriate avatar image based on the given avatar index.
     * @param avatarIndex the index representing a specific avatar.
     * @return the Image object corresponding to the specified avatar index.
     */
    private Image getAvatar(int avatarIndex) {
        switch (avatarIndex) {
            case 0:
                return calmGirlIcon;
            case 1:
                return coolGirlIcon;
            case 2:
                return calmBoyIcon;
            case 3:
                return coolBoyIcon;
            default:
                return null;
        }
    }

    /**
     * Handles the "NEXT" button click event, initiating an offline game with the provided usernames and avatars.
     * <p>
     * Displays warnings if username input is missing.
     */
    @FXML
    private void createNewGame() {
        firstUsername = this.firstPlayerUsername.getText();
        secondUsername = this.secondPlayerUsername.getText();
        firstAvatar = playerAvatars.get(0).getImage();
        secondAvatar = playerAvatars.get(1).getImage();
        if (!firstUsername.isEmpty() && !secondUsername.isEmpty()) {
            Controller.getInstance().loadScene("offlinePlayingMain", offlinePlaying);
        } else {
            if (firstUsername.isEmpty() && secondUsername.isEmpty()) {
                this.usernameWarning.setText(bundle.getString("usernameWarnings"));
            } else {
                this.usernameWarning.setText(bundle.getString("usernameWarning"));
            }
            this.warning.setVisible(true);
        }
    }

    /**
     * Controls the menu sound, toggling between on and off states.
     */
    @FXML
    public void menuSoundControl() {
        Controller.getInstance().menuSoundControl("offlinePlayingView");
    }
}