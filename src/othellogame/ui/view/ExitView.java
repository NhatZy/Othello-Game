package othellogame.ui.view;

import javafx.fxml.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.text.*;
import javafx.stage.*;
import othellogame.model.*;
import othellogame.ui.*;

import java.io.*;
import java.util.*;

/**
 * Represents the controller for the {@code ExitScene} FXML file in the Othello game application.
 * <p>
 * It manages the UI elements and actions associated with the {@code ExitScene} FXML file.
 * <p>
 * Follows the Model-View-Controller (MVC) pattern.
 * @author Dinh Thuy Nhat Vy
 * @version 1.0, 12/07/2023
 * @see Mark
 * @see Controller
 */
public class ExitView {
    /**
     * Represents the exit pane in the {@code ExitScene} FXML file.
     */
    @FXML
    private Pane exit;

    /**
     * Represents the title text element in the {@code ExitScene} FXML file.
     */
    @FXML
    private Text title;

    /**
     * Represents the label displaying the results for the first player in the {@code ExitScene} FXML file.
     */
    @FXML
    private Label firstPlayerResult;

    /**
     * Represents the label displaying the results for the second player in the {@code ExitScene} FXML file.
     */
    @FXML
    private Label secondPlayerResult;

    /**
     * Represents the label displaying the final results in the {@code ExitScene} FXML file.
     */
    @FXML
    private Label finalResult;

    /**
     * Stores the results string for the first player.
     */
    private String firstResult;

    /**
     * Stores the results string for the second player.
     */
    private String secondResult;

    /**
     * Stores the results string for the final outcome.
     */
    private String thirdResult;

    /**
     * Represents the ImageView displaying the result board in the {@code ExitScene} FXML file.
     */
    @FXML
    private ImageView resultBoard;

    /**
     * Represents the ImageView displaying the medal icon in the {@code ExitScene} FXML file.
     */
    @FXML
    private ImageView medalIcon;

    /**
     * Represents the group containing the exit confirmation dialog element in the {@code ExitScene} FXML file.
     */
    @FXML
    private Group exitGameQuestion;

    /**
     * Indicates whether a player has resigned during the game.
     */
    private boolean resigned = false;

    /**
     * Default constructor for the {@code ExitView} class.
     * <p>
     * Note: this constructor is automatically generated by the compiler and is not intended for direct use.
     */
    public ExitView() {}

    /**
     * Loads the {@code ExitScene} FXML file by initializing the UI components and setting the scene.
     * @param currentPane the current pane from which the {@code ExitScene} is loaded.
     */
    public void loadExitScene(Pane currentPane) {
        try {
            ResourceBundle bundle = ResourceBundle.getBundle("othellogame.ui.languages", Locale.getDefault());
            FXMLLoader loader = new FXMLLoader();
            Stage stage = (Stage) currentPane.getScene().getWindow();
            loader.setLocation(getClass().getResource("ExitScene.fxml"));
            loader.setResources(bundle);
            loader.setController(this);
            Parent root = loader.load();
            stage.getScene().setRoot(root);
            this.finalResult.setText(thirdResult);
            if (!resigned) {
                this.firstPlayerResult.setText(firstResult);
                this.secondPlayerResult.setText(secondResult);
            } else {
                this.firstPlayerResult.setVisible(false);
                this.secondPlayerResult.setVisible(false);
                this.finalResult.setLayoutY(282.0);
                this.medalIcon.setLayoutY(410.0);
            }
        } catch (IOException e) {
            System.out.println("ERROR: [ExitScene] - " + e.getMessage());
        }
    }

    /**
     * Updates the results displayed on the {@code ExitScene} based on the game outcome.
     * @param finalResult indicates whether the provided results are the final outcome of the game.
     * @param playerIndex index of the player.
     * @param winner name of the winner.
     * @param totalDiscs total discs obtained by the player.
     * @param winnerMark mark of the winner (BLACK or WHITE).
     * @param resignedPlayer name of the player who resigned.
     */
    public void updatePlayersResults(boolean finalResult, int playerIndex, String winner, int totalDiscs, Mark winnerMark, String resignedPlayer) {
        ResourceBundle bundle = ResourceBundle.getBundle("othellogame.ui.languages", Locale.getDefault());
        if (!finalResult) {
            if (playerIndex == 0) {
                this.firstResult = "1. " + bundle.getString("player") + " " + winner + " " + bundle.getString("markBlack") + " " + bundle.getString("gets") + " " + totalDiscs + " " + bundle.getString("discs");
            } else {
                this.secondResult = "2. " + bundle.getString("player") + " " + winner + " " + bundle.getString("markWhite") + " " + bundle.getString("gets") + " " + totalDiscs + " " + bundle.getString("discs");
            }
        } else {
            if (playerIndex == -1) {
                if (winnerMark == Mark.BLACK) {
                    this.thirdResult = bundle.getString("congratulations") + " " + bundle.getString("player") + " " + winner + " " + bundle.getString("markBlack") + " !";
                } else if (winnerMark == Mark.WHITE) {
                    this.thirdResult = bundle.getString("congratulations") + " " + bundle.getString("player") + " " + winner + " " + bundle.getString("markWhite") + " !";
                } else {
                    this.thirdResult = bundle.getString("tiedResultAnnouncement");
                }
            } else {
                resigned = true;
                if (winnerMark == Mark.BLACK) {
                    this.thirdResult = bundle.getString("player") + " " + resignedPlayer + " " + bundle.getString("markWhite") + " " + bundle.getString("surrendered") + " " + bundle.getString("congratulations") + " " + bundle.getString("player") + " " + winner + " " + bundle.getString("markBlack") + " !";
                } else {
                    this.thirdResult = bundle.getString("player") + " " + resignedPlayer + " " + bundle.getString("markBlack") + " " + bundle.getString("surrendered") + " " + bundle.getString("congratulations") + " " + bundle.getString("player") + " " + winner + " " + bundle.getString("markWhite") + " !";
                }
            }
        }
    }

    /**
     * Handles the replay button click event.
     * <p>
     * Resets the game state and navigates back to the menu scene.
     */
    @FXML
    private void onReplayClick() {
        resigned = false;
        Controller.menuSceneReloaded = true;
        Controller.getInstance().loadScene("menu", exit);
    }

    /**
     * Handles the exit button click event.
     * <p>
     * Displays the exit confirmation dialog.
     */
    @FXML
    private void onExitClick() {
        this.resultBoard.setVisible(false);
        this.firstPlayerResult.setVisible(false);
        this.secondPlayerResult.setVisible(false);
        this.finalResult.setVisible(false);
        this.medalIcon.setVisible(false);
        this.title.setLayoutX(292.0);
        this.exitGameQuestion.setVisible(true);
    }

    /**
     * Handles the close icon click event in the exit confirmation dialog.
     * <p>
     * Hides the exit confirmation dialog and restores the main exit scene.
     */
    @FXML
    private void onCloseIconClick() {
        this.exitGameQuestion.setVisible(false);
        this.title.setLayoutX(252.0);
        this.resultBoard.setVisible(true);
        this.firstPlayerResult.setVisible(true);
        this.secondPlayerResult.setVisible(true);
        this.finalResult.setVisible(true);
        this.medalIcon.setVisible(true);
    }

    /**
     * Handles the yes button click event in the exit confirmation dialog.
     * <p>
     * Resets the resigned flag and navigates to the {@code ThankYouScene}.
     */
    @FXML
    private void onYesBtnClick() {
        resigned = false;
        Controller.getInstance().loadScene("thankYou", exit);
    }
}