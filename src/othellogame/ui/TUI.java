package othellogame.ui;

import othellogame.ai.*;
import othellogame.model.*;

import java.util.*;

/**
 * The TUI (Text-based User Interface) class provides a console-based interface for playing the Othello game.
 * <p>
 * It allows users to configure game settings, choose players (including AI types), and play multiple matches of the game.
 * @author Dinh Thuy Nhat Vy
 * @version 1.0, 12/07/2023
 * @see AbstractPlayer
 * @see Mark
 * @see OthelloGame
 * @see Move
 * @see ComputerPlayer
 * @see NaiveStrategy
 * @see SmartStrategy
 * @see HumanPlayer
 */
public class TUI {
    /**
     * A {@link Scanner} object for reading user input from the console.
     */
    private Scanner scanner = new Scanner(System.in);

    /**
     * Default constructor for the {@code TUI} class.
     * <p>
     * Note: this constructor is automatically generated by the compiler and is not intended for direct use.
     */
    public TUI() {}

    /**
     * The entry point for the Othello game TUI application.
     * @param args command-line arguments passed to the application.
     */
    public static void main(String[] args) {
        TUI object = new TUI();
        object.run();
    }

    /**
     * Runs the Othello game TUI application, allowing users to play multiple matches of the game.
     */
    public void run() {
        String output;
        do {
            System.out.println("In order to use AI, please enter \"-N\" for a Naive AI, or enter \"-S\" for a Smart AI");
            String name1, name2;
            do {
                System.out.print("Please enter player 1 (Mark BLACK): ");
                name1 = scanner.nextLine();
            } while (name1.isEmpty());
            do {
                System.out.print("Please enter player 2 (Mark WHITE): ");
                name2 = scanner.nextLine();
            } while (name2.isEmpty());
            AbstractPlayer player1 = createPlayer(name1, Mark.BLACK);
            AbstractPlayer player2 = createPlayer(name2, Mark.WHITE);
            OthelloGame game = new OthelloGame(player1, player2);
            while (!game.isGameOver()) {
                AbstractPlayer player = (AbstractPlayer) game.getTurn();
                System.out.println(game.getBoard().toIndexString());
                Move move = null;
                if (player instanceof ComputerPlayer) {
                    System.out.println("Current Player: " + player.getName() + " (Mark " + player.getMark() + ")");
                    if (game.getValidMoves().isEmpty()) {
                        game.swapTurn();
                    } else {
                        move = player.determineMove(game);
                    }
                } else {
                    move = player.determineMove(game);
                }
                game.doMove(move);
            }
            System.out.println(game.getBoard().toIndexString());
            System.out.println("Player " + player1.getName() + " (Mark " + player1.getMark() + ") gets " + game.countBlack() + " discs");
            System.out.println("Player " + player2.getName() + " (Mark " + player2.getMark() + ") gets " + game.countWhite() + " discs");
            if (game.getWinner() == Mark.BLACK) {
                System.out.println("Congratulations to player " + player1.getName() + " (Mark " + player1.getMark() + ")");
            } else if (game.getWinner() == Mark.WHITE) {
                System.out.println("Congratulations to player " + player2.getName() + " (Mark " + player2.getMark() + ")");
            } else {
                System.out.println("It's a tie!");
            }
            System.out.println();
            System.out.println("Do you wish to continue a new game?");
            System.out.print("Please enter \"yes\" or \"no\": ");
            output = scanner.nextLine().toLowerCase();
            System.out.println();
        } while (output.equals("yes"));
        System.out.println("Thank you so much for playing my Othello Game. I hope to see you later and a nice day ahead as well!");
    }

    /**
     * Creates a player based on the provided name and mark.
     * <p>
     * If the name is "-N" or "-n", a Naive AI player will be created.
     * <p>
     * If the name is "-S" or "-s", a Smart AI player will be created.
     * <p>
     * Otherwise, a human player will be created with the given name and mark.
     * @param name the name of the player.
     * @param mark the mark (BLACK or WHITE) associated with the player.
     * @return an {@link AbstractPlayer} object representing the created player.
     */
    public AbstractPlayer createPlayer(String name, Mark mark) {
        if (name.equalsIgnoreCase("-N")) {
            return new ComputerPlayer(new NaiveStrategy(), mark);
        } else if (name.equalsIgnoreCase("-S")) {
            return new ComputerPlayer(new SmartStrategy(), mark);
        } else {
            return new HumanPlayer(name, mark);
        }
    }
}